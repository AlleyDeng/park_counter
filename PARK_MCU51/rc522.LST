C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN rc522.OBJ
COMPILER INVOKED BY: D:\Program Files\Keil_v5\C51\BIN\C51.EXE rc522.c COMPACT OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEN
                    -D

line level    source

   1          #include <intrins.h>
   2          #include "lpcreg.h"
   3          #include "main.h"
   4          #include "mfrc522.h"
   5          
   6          #define MAXRLEN 18
   7          
   8          
   9          
  10          
  11          /////////////////////////////////////////////////////////////////////
  12          //功    能：寻卡
  13          //参数说明: req_code[IN]:寻卡方式
  14          //                0x52 = 寻感应区内所有符合14443A标准的卡
  15          //                0x26 = 寻未进入休眠状态的卡
  16          //          pTagType[OUT]：卡片类型代码
  17          //                0x4400 = Mifare_UltraLight
  18          //                0x0400 = Mifare_One(S50)
  19          //                0x0200 = Mifare_One(S70)
  20          //                0x0800 = Mifare_Pro(X)
  21          //                0x4403 = Mifare_DESFire
  22          //返    回: 成功返回MI_OK
  23          /////////////////////////////////////////////////////////////////////
  24          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
  25          {
  26   1          char status;  
  27   1          unsigned int  unLen;
  28   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  29   1      
  30   1          ClearBitMask(Status2Reg,0x08);
  31   1          WriteRawRC(BitFramingReg,0x07);
  32   1          SetBitMask(TxControlReg,0x03);
  33   1      
  34   1          ucComMF522Buf[0] = req_code;
  35   1      
  36   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  37   1      
  38   1          if ((status == MI_OK) && (unLen == 0x10))
  39   1          {    
  40   2              *pTagType     = ucComMF522Buf[0];
  41   2              *(pTagType+1) = ucComMF522Buf[1];
  42   2          }
  43   1          else
  44   1          {   status = MI_ERR;  
  45   2      
  46   2      
  47   2      
  48   2          }
  49   1      
  50   1          return status;
  51   1      }
  52          
  53          /////////////////////////////////////////////////////////////////////
  54          //功    能：防冲撞
C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 2   

  55          //参数说明: pSnr[OUT]:卡片序列号，4字节
  56          //返    回: 成功返回MI_OK
  57          /////////////////////////////////////////////////////////////////////  
  58          char PcdAnticoll(unsigned char *pSnr)
  59          {
  60   1          char status;
  61   1          unsigned char i,snr_check=0;
  62   1          unsigned int  unLen;
  63   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  64   1      
  65   1      
  66   1          ClearBitMask(Status2Reg,0x08);
  67   1          WriteRawRC(BitFramingReg,0x00);
  68   1          ClearBitMask(CollReg,0x80);
  69   1      
  70   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  71   1          ucComMF522Buf[1] = 0x20;
  72   1      
  73   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  74   1      
  75   1          if (status == MI_OK)
  76   1          {
  77   2              for (i=0; i<4; i++)
  78   2              {   
  79   3                  *(pSnr+i)  = ucComMF522Buf[i];
  80   3                  snr_check ^= ucComMF522Buf[i];
  81   3      
  82   3              }
  83   2              if (snr_check != ucComMF522Buf[i])
  84   2              {   status = MI_ERR;    }
  85   2          }
  86   1      
  87   1          SetBitMask(CollReg,0x80);
  88   1          return status;
  89   1      }
  90          
  91          /////////////////////////////////////////////////////////////////////
  92          //功    能：选定卡片
  93          //参数说明: pSnr[IN]:卡片序列号，4字节
  94          //返    回: 成功返回MI_OK
  95          /////////////////////////////////////////////////////////////////////
  96          char PcdSelect(unsigned char *pSnr)
  97          {
  98   1          char status;
  99   1          unsigned char i;
 100   1          unsigned int  unLen;
 101   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 102   1      
 103   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
 104   1          ucComMF522Buf[1] = 0x70;
 105   1          ucComMF522Buf[6] = 0;
 106   1          for (i=0; i<4; i++)
 107   1          {
 108   2              ucComMF522Buf[i+2] = *(pSnr+i);
 109   2              ucComMF522Buf[6]  ^= *(pSnr+i);
 110   2          }
 111   1          CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
 112   1      
 113   1          ClearBitMask(Status2Reg,0x08);
 114   1      
 115   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
 116   1      
C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 3   

 117   1          if ((status == MI_OK) && (unLen == 0x18))
 118   1          {   status = MI_OK;  }
 119   1          else
 120   1          {   status = MI_ERR;    }
 121   1      
 122   1          return status;
 123   1      }
 124          
 125          /////////////////////////////////////////////////////////////////////
 126          //功    能：验证卡片密码
 127          //参数说明: auth_mode[IN]: 密码验证模式
 128          //                 0x60 = 验证A密钥
 129          //                 0x61 = 验证B密钥 
 130          //          addr[IN]：块地址
 131          //          pKey[IN]：密码
 132          //          pSnr[IN]：卡片序列号，4字节
 133          //返    回: 成功返回MI_OK
 134          /////////////////////////////////////////////////////////////////////               
 135          char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
 136          {
 137   1          char status;
 138   1          unsigned int  unLen;
 139   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 140   1      
 141   1          ucComMF522Buf[0] = auth_mode;
 142   1          ucComMF522Buf[1] = addr;
 143   1          for (i=0; i<6; i++)
 144   1          {    ucComMF522Buf[i+2] = *(pKey+i);   }
 145   1          for (i=0; i<6; i++)
 146   1          {    ucComMF522Buf[i+8] = *(pSnr+i);   }
 147   1          //   memcpy(&ucComMF522Buf[2], pKey, 6); 
 148   1          //   memcpy(&ucComMF522Buf[8], pSnr, 4); 
 149   1      
 150   1          status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
 151   1          if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
 152   1          {   status = MI_ERR;   }
 153   1      
 154   1          return status;
 155   1      }
 156          
 157          /////////////////////////////////////////////////////////////////////
 158          //功    能：读取M1卡一块数据
 159          //参数说明: addr[IN]：块地址
 160          //          pData[OUT]：读出的数据，16字节
 161          //返    回: 成功返回MI_OK
 162          ///////////////////////////////////////////////////////////////////// 
 163          char PcdRead(unsigned char addr,unsigned char *pData)
 164          {
 165   1          char status;
 166   1          unsigned int  unLen;
 167   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 168   1      
 169   1          ucComMF522Buf[0] = PICC_READ;
 170   1          ucComMF522Buf[1] = addr;
 171   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 172   1      
 173   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 174   1          if ((status == MI_OK) && (unLen == 0x90))
 175   1              //   {   memcpy(pData, ucComMF522Buf, 16);   }
 176   1          {
 177   2              for (i=0; i<16; i++)
 178   2              {    *(pData+i) = ucComMF522Buf[i];   }
C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 4   

 179   2          }
 180   1          else
 181   1          {   status = MI_ERR;   }
 182   1      
 183   1          return status;
 184   1      }
 185          
 186          /////////////////////////////////////////////////////////////////////
 187          //功    能：写数据到M1卡一块
 188          //参数说明: addr[IN]：块地址
 189          //          pData[IN]：写入的数据，16字节
 190          //返    回: 成功返回MI_OK
 191          /////////////////////////////////////////////////////////////////////                  
 192          char PcdWrite(unsigned char addr,unsigned char *pData)
 193          {
 194   1          char status;
 195   1          unsigned int  unLen;
 196   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 197   1      
 198   1          ucComMF522Buf[0] = PICC_WRITE;
 199   1          ucComMF522Buf[1] = addr;
 200   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 201   1      
 202   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 203   1      
 204   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 205   1          {   status = MI_ERR;   }
 206   1      
 207   1          if (status == MI_OK)
 208   1          {
 209   2              //memcpy(ucComMF522Buf, pData, 16);
 210   2              for (i=0; i<16; i++)
 211   2              {    ucComMF522Buf[i] = *(pData+i);   }
 212   2              CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
 213   2      
 214   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
 215   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 216   2              {   status = MI_ERR;   }
 217   2          }
 218   1      
 219   1          return status;
 220   1      }
 221          
 222          /////////////////////////////////////////////////////////////////////
 223          //功    能：扣款和充值
 224          //参数说明: dd_mode[IN]：命令字
 225          //               0xC0 = 扣款
 226          //               0xC1 = 充值
 227          //          addr[IN]：钱包地址
 228          //          pValue[IN]：4字节增(减)值，低位在前
 229          //返    回: 成功返回MI_OK
 230          /////////////////////////////////////////////////////////////////////                 
 231          char PcdValue(unsigned char dd_mode,unsigned char addr,unsigned char *pValue)
 232          {
 233   1          char status;
 234   1          unsigned int  unLen;
 235   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 236   1      
 237   1          ucComMF522Buf[0] = dd_mode;
 238   1          ucComMF522Buf[1] = addr;
 239   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 240   1      
C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 5   

 241   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 242   1      
 243   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 244   1          {   status = MI_ERR;   }
 245   1      
 246   1          if (status == MI_OK)
 247   1          {
 248   2              // memcpy(ucComMF522Buf, pValue, 4);
 249   2              for (i=0; i<16; i++)
 250   2              {    ucComMF522Buf[i] = *(pValue+i);   }
 251   2              CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 252   2              unLen = 0;
 253   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 254   2              if (status != MI_ERR)
 255   2              {    status = MI_OK;    }
 256   2          }
 257   1      
 258   1          if (status == MI_OK)
 259   1          {
 260   2              ucComMF522Buf[0] = PICC_TRANSFER;
 261   2              ucComMF522Buf[1] = addr;
 262   2              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]); 
 263   2      
 264   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 265   2      
 266   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 267   2              {   status = MI_ERR;   }
 268   2          }
 269   1          return status;
 270   1      }
 271          
 272          /////////////////////////////////////////////////////////////////////
 273          //功    能：备份钱包
 274          //参数说明: sourceaddr[IN]：源地址
 275          //          goaladdr[IN]：目标地址
 276          //返    回: 成功返回MI_OK
 277          /////////////////////////////////////////////////////////////////////
 278          char PcdBakValue(unsigned char sourceaddr, unsigned char goaladdr)
 279          {
 280   1          char status;
 281   1          unsigned int  unLen;
 282   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 283   1      
 284   1          ucComMF522Buf[0] = PICC_RESTORE;
 285   1          ucComMF522Buf[1] = sourceaddr;
 286   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 287   1      
 288   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 289   1      
 290   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 291   1          {   status = MI_ERR;   }
 292   1      
 293   1          if (status == MI_OK)
 294   1          {
 295   2              ucComMF522Buf[0] = 0;
 296   2              ucComMF522Buf[1] = 0;
 297   2              ucComMF522Buf[2] = 0;
 298   2              ucComMF522Buf[3] = 0;
 299   2              CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 300   2      
 301   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 302   2              if (status != MI_ERR)
C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 6   

 303   2              {    status = MI_OK;    }
 304   2          }
 305   1      
 306   1          if (status != MI_OK)
 307   1          {    return MI_ERR;   }
 308   1      
 309   1          ucComMF522Buf[0] = PICC_TRANSFER;
 310   1          ucComMF522Buf[1] = goaladdr;
 311   1      
 312   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 313   1      
 314   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 315   1      
 316   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 317   1          {   status = MI_ERR;   }
 318   1      
 319   1          return status;
 320   1      }
 321          
 322          
 323          /////////////////////////////////////////////////////////////////////
 324          //功    能：命令卡片进入休眠状态
 325          //返    回: 成功返回MI_OK
 326          /////////////////////////////////////////////////////////////////////
 327          char PcdHalt(void)
 328          {
 329   1          char status;
 330   1          unsigned int  unLen;
 331   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 332   1      
 333   1          ucComMF522Buf[0] = PICC_HALT;
 334   1          ucComMF522Buf[1] = 0;
 335   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 336   1      
 337   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 338   1      
 339   1          return MI_OK;
 340   1      }
 341          
 342          /////////////////////////////////////////////////////////////////////
 343          //用MF522计算CRC16函数
 344          /////////////////////////////////////////////////////////////////////
 345          void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
 346          {
 347   1          unsigned char i,n;
 348   1          ClearBitMask(DivIrqReg,0x04);
 349   1          WriteRawRC(CommandReg,PCD_IDLE);
 350   1          SetBitMask(FIFOLevelReg,0x80);
 351   1          for (i=0; i<len; i++)
 352   1          {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
 353   1          WriteRawRC(CommandReg, PCD_CALCCRC);
 354   1          i = 0xFF;
 355   1          do 
 356   1          {
 357   2              n = ReadRawRC(DivIrqReg);
 358   2              i--;
 359   2          }
 360   1          while ((i!=0) && !(n&0x04));
 361   1          pOutData[0] = ReadRawRC(CRCResultRegL);
 362   1          pOutData[1] = ReadRawRC(CRCResultRegM);
 363   1      }
 364          
C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 7   

 365          /////////////////////////////////////////////////////////////////////
 366          //功    能：复位RC522
 367          //返    回: 成功返回MI_OK
 368          /////////////////////////////////////////////////////////////////////
 369          char PcdReset(void)
 370          {
 371   1          //unsigned char i;
 372   1          MF522_RST=1;
 373   1      
 374   1          _nop_();                  
 375   1      
 376   1          MF522_RST=0;
 377   1      
 378   1          _nop_();                   
 379   1      
 380   1          MF522_RST=1;
 381   1      
 382   1          _nop_();                 
 383   1      
 384   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
 385   1      
 386   1          _nop_();                  
 387   1      
 388   1      
 389   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363
 390   1          WriteRawRC(TReloadRegL,30);           
 391   1          WriteRawRC(TReloadRegH,0);
 392   1          WriteRawRC(TModeReg,0x8D);
 393   1          WriteRawRC(TPrescalerReg,0x3E);
 394   1          WriteRawRC(TxAutoReg,0x40);
 395   1          return MI_OK;
 396   1      }
 397          
 398          /////////////////////////////////////////////////////////////////////
 399          //功    能：读RC632寄存器
 400          //参数说明：Address[IN]:寄存器地址
 401          //返    回：读出的值
 402          /////////////////////////////////////////////////////////////////////
 403          unsigned char ReadRawRC(unsigned char Address)
 404          {
 405   1          unsigned char i, ucAddr;
 406   1          unsigned char ucResult=0;
 407   1      
 408   1          MF522_SCK = 0;
 409   1          MF522_NSS = 0;
 410   1          ucAddr = ((Address<<1)&0x7E)|0x80;
 411   1      
 412   1          for(i=8;i>0;i--)
 413   1          {
 414   2              MF522_SI = ((ucAddr&0x80)==0x80);
 415   2              MF522_SCK = 1;
 416   2              ucAddr <<= 1;
 417   2              MF522_SCK = 0;
 418   2          }
 419   1      
 420   1          for(i=8;i>0;i--)
 421   1          {
 422   2              MF522_SCK = 1;
 423   2              ucResult <<= 1;
 424   2              ucResult|=(bit)MF522_SO;
 425   2              MF522_SCK = 0;
 426   2          }
C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 8   

 427   1      
 428   1          MF522_NSS = 1;
 429   1          MF522_SCK = 1;
 430   1          return ucResult;
 431   1      }
 432          
 433          /////////////////////////////////////////////////////////////////////
 434          //功    能：写RC632寄存器
 435          //参数说明：Address[IN]:寄存器地址
 436          //          value[IN]:写入的值
 437          /////////////////////////////////////////////////////////////////////
 438          void WriteRawRC(unsigned char Address, unsigned char value)
 439          {  
 440   1          unsigned char i, ucAddr;
 441   1      
 442   1          MF522_SCK = 0;
 443   1          MF522_NSS = 0;
 444   1          ucAddr = ((Address<<1)&0x7E);
 445   1      
 446   1          for(i=8;i>0;i--)
 447   1          {
 448   2              MF522_SI = ((ucAddr&0x80)==0x80);
 449   2              MF522_SCK = 1;
 450   2              ucAddr <<= 1;
 451   2              MF522_SCK = 0;
 452   2          }
 453   1      
 454   1          for(i=8;i>0;i--)
 455   1          {
 456   2              MF522_SI = ((value&0x80)==0x80);
 457   2              MF522_SCK = 1;
 458   2              value <<= 1;
 459   2              MF522_SCK = 0;
 460   2          }
 461   1          MF522_NSS = 1;
 462   1          MF522_SCK = 1;
 463   1      }
 464          
 465          /////////////////////////////////////////////////////////////////////
 466          //功    能：置RC522寄存器位
 467          //参数说明：reg[IN]:寄存器地址
 468          //          mask[IN]:置位值
 469          /////////////////////////////////////////////////////////////////////
 470          void SetBitMask(unsigned char reg,unsigned char mask)  
 471          {
 472   1          char tmp = 0x0;
 473   1          tmp = ReadRawRC(reg);
 474   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 475   1      }
 476          
 477          /////////////////////////////////////////////////////////////////////
 478          //功    能：清RC522寄存器位
 479          //参数说明：reg[IN]:寄存器地址
 480          //          mask[IN]:清位值
 481          /////////////////////////////////////////////////////////////////////
 482          void ClearBitMask(unsigned char reg,unsigned char mask)  
 483          {
 484   1          char tmp = 0x0;
 485   1          tmp = ReadRawRC(reg);
 486   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 487   1      } 
 488          
C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 9   

 489          /////////////////////////////////////////////////////////////////////
 490          //功    能：通过RC522和ISO14443卡通讯
 491          //参数说明：Command[IN]:RC522命令字
 492          //          pInData[IN]:通过RC522发送到卡片的数据
 493          //          InLenByte[IN]:发送数据的字节长度
 494          //          pOutData[OUT]:接收到的卡片返回数据
 495          //          *pOutLenBit[OUT]:返回数据的位长度
 496          /////////////////////////////////////////////////////////////////////
 497          char PcdComMF522(unsigned char Command, 
 498                  unsigned char *pInData, 
 499                  unsigned char InLenByte,
 500                  unsigned char *pOutData, 
 501                  unsigned int  *pOutLenBit)
 502          {
 503   1          char status = MI_ERR;
 504   1          unsigned char irqEn   = 0x00;
 505   1          unsigned char waitFor = 0x00;
 506   1          unsigned char lastBits;
 507   1          unsigned char n;
 508   1          unsigned int i;
 509   1          switch (Command)
 510   1          {
 511   2              case PCD_AUTHENT:
 512   2                  irqEn   = 0x12;
 513   2                  waitFor = 0x10;
 514   2                  break;
 515   2              case PCD_TRANSCEIVE:
 516   2                  irqEn   = 0x77;
 517   2                  waitFor = 0x30;
 518   2                  break;
 519   2              default:
 520   2                  break;
 521   2          }
 522   1      
 523   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 524   1          ClearBitMask(ComIrqReg,0x80);
 525   1          WriteRawRC(CommandReg,PCD_IDLE);
 526   1          SetBitMask(FIFOLevelReg,0x80);
 527   1      
 528   1          for (i=0; i<InLenByte; i++)
 529   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 530   1          WriteRawRC(CommandReg, Command);
 531   1      
 532   1      
 533   1          if (Command == PCD_TRANSCEIVE)
 534   1          {    SetBitMask(BitFramingReg,0x80);  }
 535   1      
 536   1          i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 537   1          do 
 538   1          {
 539   2              n = ReadRawRC(ComIrqReg);
 540   2              i--;
 541   2          }
 542   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 543   1          ClearBitMask(BitFramingReg,0x80);
 544   1      
 545   1          if (i!=0)
 546   1          {    
 547   2              if(!(ReadRawRC(ErrorReg)&0x1B))
 548   2              {
 549   3                  status = MI_OK;
 550   3                  if (n & irqEn & 0x01)
C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 10  

 551   3                  {   status = MI_NOTAGERR;   }
 552   3                  if (Command == PCD_TRANSCEIVE)
 553   3                  {
 554   4                      n = ReadRawRC(FIFOLevelReg);
 555   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 556   4                      if (lastBits)
 557   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
 558   4                      else
 559   4                      {   *pOutLenBit = n*8;   }
 560   4                      if (n == 0)
 561   4                      {   n = 1;    }
 562   4                      if (n > MAXRLEN)
 563   4                      {   n = MAXRLEN;   }
 564   4                      for (i=0; i<n; i++)
 565   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 566   4                  }
 567   3              }
 568   2              else
 569   2              {   status = MI_ERR;   }
 570   2      
 571   2          }
 572   1      
 573   1      
 574   1          SetBitMask(ControlReg,0x80);           // stop timer now
 575   1          WriteRawRC(CommandReg,PCD_IDLE); 
 576   1          return status;
 577   1      }
 578          
 579          
 580          /////////////////////////////////////////////////////////////////////
 581          //开启天线  
 582          //每次启动或关闭天险发射之间应至少有1ms的间隔
 583          /////////////////////////////////////////////////////////////////////
 584          void PcdAntennaOn()
 585          {
 586   1          unsigned char i;
 587   1          i = ReadRawRC(TxControlReg);
 588   1          if (!(i & 0x03))
 589   1          {
 590   2              SetBitMask(TxControlReg, 0x03);
 591   2          }
 592   1      }
 593          
 594          
 595          /////////////////////////////////////////////////////////////////////
 596          //关闭天线
 597          /////////////////////////////////////////////////////////////////////
 598          void PcdAntennaOff()
 599          {
 600   1          ClearBitMask(TxControlReg, 0x03);
 601   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2404    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----     238
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.53.0.0   RC522                                                             04/19/2019 20:05:02 PAGE 11  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
